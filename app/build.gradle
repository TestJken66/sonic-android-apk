plugins {
    id 'com.android.application'
    id 'org.jetbrains.kotlin.android'
    id 'kotlin-kapt'
}

android {
    compileSdk 31

    defaultConfig {
        applicationId "org.cloud.sonic.android"
        minSdk 21
        targetSdk 31
        versionCode 10
        versionName "SONIC_VERSION"

        testInstrumentationRunner "androidx.test.runner.AndroidJUnitRunner"
    }

    buildTypes {
        release {
            minifyEnabled false
            proguardFiles getDefaultProguardFile('proguard-android-optimize.txt'), 'proguard-rules.pro'
        }
    }
    kotlinOptions {
        jvmTarget = '1.8'
    }
    viewBinding {
        enabled = true
    }
    dexOptions {
        preDexLibraries false
        maxProcessCount 8
        javaMaxHeapSize "4g"
    }
    compileOptions {
        sourceCompatibility JavaVersion.VERSION_1_8
        targetCompatibility JavaVersion.VERSION_1_8
    }
    aaptOptions {
        cruncherEnabled = false
        useNewCruncher = false
    }
    lintOptions {
        checkReleaseBuilds true
        quiet true
        abortOnError false
        ignoreWarnings true
        textOutput "stdout"
        textReport false
        disable "UnusedResources", 'RestrictedApi'
        // turn off checking the given issue id's
        disable 'TypographyFractions', 'TypographyQuotes'
        // turn on the given issue id's
        enable 'RtlHardcoded', 'RtlCompat', 'RtlEnabled'
        // check *only* the given issue id's
        check 'NewApi', 'InlinedApi'
    }
}

tasks.withType(Javadoc) {
    options.addStringOption('Xdoclint:none', '-quiet')
    options.addStringOption('encoding', 'UTF-8')
    options.addStringOption('charSet', 'UTF-8')
    options.encoding = "UTF-8"
}


dependencies {

    implementation 'androidx.core:core-ktx:1.7.0'
    implementation 'androidx.appcompat:appcompat:1.3.0'
    implementation 'com.google.android.material:material:1.4.0'
    implementation 'androidx.constraintlayout:constraintlayout:2.0.4'
    implementation project(path: ':lib_socketmanager')
    testImplementation 'junit:junit:4.13.2'
    androidTestImplementation 'androidx.test.ext:junit:1.1.3'
    androidTestImplementation 'androidx.test.espresso:espresso-core:3.4.0'

    //Android 工具类合集
    implementation 'com.blankj:utilcodex:1.31.0'

    //协成
    implementation 'org.jetbrains.kotlinx:kotlinx-coroutines-core:1.5.0'
    implementation 'org.jetbrains.kotlinx:kotlinx-coroutines-android:1.1.1'

    // 基础依赖包，必须要依赖 全面屏
    implementation 'com.geyifeng.immersionbar:immersionbar:3.2.1'
    // kotlin扩展
    implementation 'com.geyifeng.immersionbar:immersionbar-ktx:3.2.1'
    //Gson 解析库
    implementation 'com.google.code.gson:gson:2.9.0'

    //hilt 使用
//    implementation "com.google.dagger:hilt-android:2.28-alpha"
//    kapt "com.google.dagger:hilt-android-compiler:2.28-alpha"

    //获取wifi需要
    implementation("io.github.thanosfisherman.wifiutils:wifiutils:1.6.6")

    compileOnly fileTree(dir: 'src/libs', include: ['*.jar'])
}


////skip Test tasks
//gradle.taskGraph.whenReady {
//    tasks.each { task ->
//        println("-------taskname: ${task.name}---------")
//        if (task.name.contains("test")) {
//            task.enabled = false
//        }
//    }
//}